'use strict';

// Описание задачи:
// Используйте функции alert, confirm, prompt для общения с пользователем.

// Написать игровой бот.

// Что должна делать программа:

// — спрашивает пользователя: "Угадай число от 1 до 100".
// — если пользовательское число больше, то бот выводит "Загаданное число меньше" и предлагает ввести новый вариант;
// — если пользовательское число меньше, то бот выводит "Загаданное число больше" и предлагает ввести новый вариант;
// — если пользователь ввел не число, то выводит сообщение "Введи число!" и предлагает ввести новый вариант;
// — если пользователь нажимает "Отмена", то игра заканчивается.

// Программа должны быть выполнена с помощью рекурсии, без единого цикла.

// Загаданное число должно храниться «в замыкании»

// Описание усложненной задачи:
// Дописать функционал игрового бота.

// Кол-во попыток пользователя должно быть ограничено: 10

// — если пользовательское число больше, то бот выводит "Загаданное число меньше, осталось попыток ..." и предлагает ввести новый вариант;
// — если пользовательское число меньше, то бот выводит "Загаданное число больше, осталось попыток ..." и предлагает ввести новый вариант;
// — если пользователь вводит правильное число, то бот выводит "Поздравляю, Вы угадали!!! Хотели бы сыграть еще?", при нажатии ОК игра перезапускается (снова 10 попыток и новое загаданное число)
// — если пользователь ввел не число, то выводит сообщение "Введи число!" и предлагает ввести новый вариант;
// — если пользователь нажимает "Отмена", то игра выводит прощальное сообщение и завершается.
// — если закончились попытки то программа сообщает: "Попытки закончились, хотите сыграть еще?"

// Программа должны быть выполнена с помощью рекурсии, без единого цикла.

// Загаданное число и оставшиеся кол-во попыток должно храниться «в замыкании»

//Функции

// Получение рандомного целого в диапазоне
const getRandomIntInclusive = function (min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются
};

// Проверка на число
const isNumber = function (v) {
  return !isNaN(parseFloat(v)) && isFinite(v);
};

// Логика в функции с замыканием
const game = function () {
  let hiddenNumber = getRandomIntInclusive(1, 100);
  let attemptCounter = 10;
  let attempt = prompt('Угадай число от 1 до 100');

  const checkAttempt = function () {
    switch (true) {
      case attempt === null: {
        return false;
      }

      case !isNumber(attempt): {
        alert('Введи число!');
        break;
      }

      case +attempt === hiddenNumber: {
        return confirm(`Поздравляю, Вы угадали!!! Это число ${hiddenNumber}. Хотели бы сыграть еще?`);
      }

      case attemptCounter === 1: {
        return confirm('Попытки закончились, хотите сыграть еще?');
      }

      case attempt > hiddenNumber: {
        alert(`Загаданное число меньше, осталось попыток ${--attemptCounter}.`);
        break;
      }

      case attempt < hiddenNumber: {
        alert(`Загаданное число больше, осталось попыток ${--attemptCounter}.`);
        break;
      }
    }

    attempt = prompt('Введите новый вариант');
    return checkAttempt();
  };

  return checkAttempt;
};

// Запуск

const startGame = function () {
  if (game()()) {
    startGame();
  } else {
    alert('Игра закончена. До свидания.');
  }
};

startGame();
